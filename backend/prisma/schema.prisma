// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @unique @default(uuid())
  email        String?
  username     String?
  name         String
  password     String?
  coin         Int           @default(0)
  diamond      Int           @default(0)
  google_id    String        @unique
  user_avatar  UserAvatar[]
  user_match   UserMatch[]
  user_answere UserAnswere[]
  invoice      Invoice[]

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  @@map("users")
}

model UserAvatar {
  id        String  @id @unique @default(uuid())
  User      User    @relation(fields: [userId], references: [id])
  userId    String
  Avatar    Avatar? @relation(fields: [avatarId], references: [id])
  avatarId  String?
  is_active Boolean @default(false)

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  @@unique([userId, avatarId])
  @@map("useravatars")
}

model Avatar {
  id          String       @id @unique @default(uuid())
  image       String
  coin        Int?
  diamond     Int?
  user_avatar UserAvatar[]

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  @@map("avatars")
}

model UserMatch {
  id       String  @id @unique @default(uuid())
  score    Int
  ringking Int
  User     User?   @relation(fields: [userId], references: [id])
  userId   String?
  Match    Match?  @relation(fields: [matchId], references: [id])
  matchId  String?

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  @@map("usermatches")
}

model Match {
  id         String      @id @unique @default(uuid())
  start      DateTime    @default(now())
  end        DateTime    @default(now())
  user_match UserMatch[]

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  @@map("matches")
}

model UserAnswere {
  id         String    @id @unique @default(uuid())
  User       User?     @relation(fields: [userId], references: [id])
  userId     String?
  Answere    Answere?  @relation(fields: [answereId], references: [id])
  answereId  String?
  Question   Question? @relation(fields: [questionId], references: [id])
  questionId String?

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  @@map("useransweres")
}

model Answere {
  id           String        @id @unique @default(uuid())
  content      String
  is_correct   Boolean
  user_answere UserAnswere[]
  Question     Question?     @relation(fields: [questionId], references: [id])
  questionId   String?

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  @@map("answeres")
}

model Question {
  id           String        @id @unique @default(uuid())
  content      String
  timer        Int
  answere      Answere[]
  user_answere UserAnswere[]

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  @@map("questions ")
}

model Invoice {
  id        String        @id @unique @default(uuid())
  status    InvoiceStatus @default(UNPAID)
  amount    Int
  User      User?         @relation(fields: [userId], references: [id])
  userId    String?
  Diamond   Diamond?      @relation(fields: [diamondId], references: [id])
  diamondId String?

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  @@map("invoices")
}

model Diamond {
  id       String    @id @unique @default(uuid())
  quantity Int
  price    Int
  invoice  Invoice[]

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  @@map("diamonds")
}

enum InvoiceStatus {
  UNPAID
  PAID
  CANCLE
}
